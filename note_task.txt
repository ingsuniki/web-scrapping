 
{% comment %} Find data on mongo db / cek data {% endcomment %}
db.list_data.find({"title":"3 Zodiak Ini Paling Gampang Jatuh Cinta pada Teman Sendiri"})
   .projection({})
   .sort({timestamp:-1})
   .limit(100)

{% comment %} Akses kibana on windows  {% endcomment %}
"C:\Program Files (x86)\GnuWin32\bin\wget.exe" 116.68.166.90/app/kibana
{% comment %} Remove Elasticsearch {% endcomment %}
https://howtoinstall.co/en/ubuntu/xenial/elasticsearch?action=remove

{% comment %} Install Elasticsearch {% endcomment %}
https://websiteforstudents.com/how-to-install-elasticsearch-engine-on-ubuntu-16-04-18-04/

{% comment %} Reset ip {% endcomment %}
http://www.itcrumbs.com/?p=623

{% comment %} Bacup Data Base save.sh ================ {% endcomment %}

	-  cd /home/support/Apps/crawlers/online-media-crawler-py/scrapyPortal/scrapyPortal && /usr/local/bin/scrapy crawl antaranewsAceh
  - https://pranavprakash.net/2017/02/04/automate-mongodb-backups-using-cron-and-shell-script/
  - create mongobackup.sh
  - chmod +x mongobackup.sh
  - crontab -e
  - 10 1 * * * /path/to/script/mongobackup.sh
  - 10 1 * * * /directory_file/mongobackup.sh

  {% comment %} contoh isi mongobackup.sh {% endcomment %}

              #!/bin/sh

          #=====================================================================
          # Set the following variables as per your requirement
          #=====================================================================
          # Database Name to backup
          MONGO_DATABASE="web-scrap"
          # Database host name
          MONGO_HOST="127.0.0.1"
          # Database port
          MONGO_PORT="27017"

          # Database user name
          DBUSERNAME=""
          # Database password
          DBPASSWORD=""
          # Authentication database name
          DBAUTHDB="root"
          # Days to keep the backup
          # DAYSTORETAINBACKUP="14"
          #=====================================================================

          TIMESTAMP=`date +%F-%H%M`
          BACKUP_NAME="$MONGO_DATABASE-$TIMESTAMP"
          # Backup directory
          BACKUPS_DIR="/home/support/Apps/sceduler/db_backup/$BACKUP_NAME"

          echo "Performing backup of $MONGO_DATABASE"
          echo "--------------------------------------------"
          # Create backup directory
          if ! mkdir -p $BACKUPS_DIR; then
            echo "Can't create backup directory in $BACKUPS_DIR. Go and fix it!" 1>&2
            exit 1;
          fi;
          # Create dump
          # mongodump --db $MONGO_DATABASE --username $DBUSERNAME --password $DBPASSWORD --out $BACKUPS_DIR
          mongodump --db $MONGO_DATABASE --username $DBUSERNAME --password $DBPASSWORD --out $BACKUPS_DIR
          # Rename dump directory to backup name
          # mv dump $BACKUP_NAME
          # Compress backup
          # tar -zcvf $BACKUPS_DIR/$BACKUP_NAME.tgz $BACKUP_NAME
          # Delete uncompressed backup
          # rm -rf $BACKUP_NAME
          # Delete backups older than retention period
          # find $BACKUPS_DIR -type f -mtime +$DAYSTORETAINBACKUP -exec rm {} +
          echo "--------------------------------------------"
          echo "Database backup complete!"

  =======

{% comment %} ========================= Backup Data Base end ================   {% endcomment %}

{% comment %} sample configuration on kibana {% endcomment %}
# rm /etc/nginx/sites-enabled/default
# rm /etc/nginx/sites-available/default
# rm /etc/nginx/sites-available/default
# nano default 
# insert the file connfiguration
# ln -s /etc/nginx/sites-available/default /etc/nginx/sites-enabled
# nginx -t 
# systemctl enable nginx
# systemctl restart nginx
# nginx -t 
# wget 116.68.166.90 
# http://116.68.166.90/app/kibana
# http://116.68.166.90/app/kibana#/home

================================================
server {
    listen 80;

    server_name 116.68.166.90;
   # return         301 https://$server_name; # Redirect to 443/SSL

   # auth_basic "Restricted Access";
   # auth_basic_user_file /etc/nginx/htpasswd.users;

    location / {
        proxy_pass http://localhost:5601;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
    }

    # listen 443 default ssl; # Listen on 443/SSL

    # SSL Certificate, Key and Settings
    # ssl_certificate /etc/pki/tls/certs/ELK-Stack.crt ;
    # ssl_certificate_key /etc/pki/tls/private/ELK-Stack.key;
    # ssl_session_cache shared:SSL:10m;

}
{% comment %} Use pm2 sceduller for restart the browser {% endcomment %}
// pm2 start index.js --cron "*/30 * * * *"
// pm2 start -f  /home/support/Apps/crawlers/online-media-crawler/index.js --cron "*/30 * * * *"

{% comment %} Use crontab and fond file {% endcomment %}
//1. crontab -e => for ope the crontab function 
//2. cd .. = > for goto base directory 
//3. find -name "node" = > find the base directory for node or etc
//   */1 * * * * /root/.nvm/versions/node/v12.13.0/bin/node /home/support/Apps/sceduler/linuxCron.js 
//   /root/.nvm/versions/node/v12.13.0/bin/node 


//   /root/.nvm/versions/node/v12.13.0/lib/node_modules/pm2/bin/pm2 start /home/support/Apps/sceduler/linuxCron.js
//3. find -name "node" = > find the base directory for node or etc
// auto Start PM2 Pull Data
// pm2 ecosystem
// 10 */1 * * * /root/.nvm/versions/node/v12.13.0/bin/node /home/support/Apps/crawlers/connector_es/dropDups/app.js

// Try this link tutorial 
// https://github.com/Unitech/pm2/issues/247
//  Successfully saved in /root/.pm2/dump.pm2
// pm2 start -f  /home/support/Apps/crawlers/online-media-crawler/index.js --cron "*/30 * * * *" use this
// pm2 start -f  /home/support/Apps/crawlers/connector_es/dropDups/app.js --cron "10 */1 * * *" use this
// pm2 start -f  ../online-media-crawler/ambilDua.js --cron "*/10 * * * *" use this
// sudo nano /root/.pm2/dump.pm2 => for chek the saving data sceduler
// @reboot /root/.nvm/v0.11.9/bin/node /root/.nvm/v0.11.9/bin/pm2 resurrect
/home/support/Apps/crawlers/online-media-crawler/

{% comment %} Install node js on linux {% endcomment %}
  - install using nvm (use this importent) 
  - sudo apt-get update
  - sudo apt-get install build-essential libssl-dev
    # Once the prerequisite packages are installed, you can pull down the nvm installation script from the projectâ€™s GitHub page. The version number may be different, but in general, you can download it with curl:
    # curl -sL https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh -o install_nvm.sh
  - nano install_nvm.sh
  - bash install_nvm.sh
  - source ~/.profile
  - nvm ls-remote
  - nvm install (find the latest lts version)

  {% comment %} delete node js {% endcomment %}
# apt-get remove nodejs //delete nodejs  

  {% comment %} Root  {% endcomment %}
  - sudo passwd root => untuk menambahkan root
  - sudo apt-get remove nginx-full nginx-common

  {% comment %} install PM2 {% endcomment %}
  - sudo npm install pm2 -g
    PM2 Manager 
#  npm i -g pm2 => for installation 
#  pm2 list  => for ceck list processed 
#  pm2 start name.js|| app || id  => start the application  
#  pm2 stop name.js || app || id  => stop the application  
#  pm2 restart name.js || app || id  => restart the application  
#  pm2 delete name.js  || app || id  => delete the list application run  
#  pm2 start logs  => for check the log activity  
#  pm2 start process.yml  => configure the multiple applications:

    apps:
        - script      : app.js
          instances   : 4
          exec_mode   : cluster
        - script      : worker.js
          watch       : true
          NODE_ENV    : development
          env_production    : 
          NODE_ENV    : production

#  CLuster Mode 
#  pm2 start app.js -i 
#  pm2 start app.js -i 0 auto detecting the number of cpu's 

#  Manage Cluster apps
#  pm2 reload app-name || all => reload with zero downtime
#  pm2 scale app-name || app-instance => scale up/down number
#  pm2 monit => monitoring the process
#  pm2 show app-name || id => show more info
  
  {% comment %} Web Scrapping puppeteer {% endcomment %}
1. cd arahkan directorinya 
2. npm init
	- untuk inisiasi
	- description : isikan deskripsikan
	- keyword : isi kan keyword nya (sembarang)
	- author : bebas
	- terus yes 
3. code . 
	- untuk membuka code editor visual studio code

4. 	npm i puppeteer (- untuk install Puppeteer)
	
	npm install yargs --save (- untuk install Yargs)

	npm install mongodb (- untuk install mongpo db)

	npm install --save node-cron (-untuk buat sceduller)

	npm install shelljs (- untuk install shelljs eksekusinya)

	npm i puppeteer-autoscroll-down

  sudo npm install -g puppeteer --unsafe-perm=true

5. make file name_file.js 

6. ketik node name_file.js

- lsb_release -a chek ubuntu version

https://github.com/puppeteer/puppeteer/blob/master/docs/troubleshooting.md#setting-up-chrome-linux-sandbox
https://github.com/puppeteer/puppeteer/issues/290
https://github.com/puppeteer/puppeteer/issues/391
https://github.com/puppeteer/puppeteer/issues/4342
https://github.com/puppeteer/puppeteer/blob/master/docs/troubleshooting.md

{% comment %} Tutorial Install Mongo DB  {% endcomment %}
- https://scotch.io/@micwanyoike/getting-started-with-mongodb-in-linux

{% comment %} setup nginx {% endcomment %}




// ==========================
install ELK
- https://linuxconfig.org/install-elk-on-ubuntu-20-04-focal-fossa-linux
- https://www.willandskill.se/en/install-elasticsearch-5-x-on-ubuntu-16-04-lts-in-less-than-3-minutes/ => install jdk
- https://www.digitalocean.com/community/tutorials/how-to-install-and-configure-elasticsearch-on-ubuntu-16-04
- https://www.digitalocean.com/community/tutorials/how-to-install-elasticsearch-logstash-and-kibana-elastic-stack-on-ubuntu-18-04
- https://www.howtoforge.com/how-to-install-elastic-stack-on-centos-8/
- http://www.newbienote.com/2013/10/menambahkan-user-root-di-ubuntu.html => untuk root password ps : root
- https://www.digitalocean.com/community/tutorials/how-to-install-the-apache-web-server-on-ubuntu-18-04-quickstart
- https://www.radford.edu/~mhtay/CPSC120/VIM_Editor_Commands.htm
- https://www.cyberciti.biz/faq/howto-set-date-time-from-linux-command-prompt/ => change current date and time 
- https://github.com/justmeandopensource/elk/blob/master/INSTALL-CentOS7.md 
- https://curiousviral.com/how-to-access-kibana-using/

=== install elasticsearch on linux xenial 16.04
- https://www.digitalocean.com/community/tutorials/how-to-install-and-configure-elasticsearch-on-ubuntu-18-04

- https://www.digitalocean.com/community/tutorials/how-to-install-nginx-on-ubuntu-16-04 =>  install nginx
- tips hilangkan auth password dan restart kibana proses untuk dapat load ke kibana 
- https://askubuntu.com/questions/235347/what-is-the-best-way-to-uninstall-nginx => remove nginx

- ===================================================================
- sudo passwd root => untuk menambahkan root
- sudo apt-get remove nginx-full nginx-common

 --wiredTigerCacheSizeGB
sudo apt-get remove nginx-full nginx-common


{% comment %} Tutorial Install Mongo DB  {% endcomment %}
- https://scotch.io/@micwanyoike/getting-started-with-mongodb-in-linux

-- install mongodb community edition  (use this importent)
  -- https://docs.mongodb.com/manual/tutorial/install-mongodb-on-ubuntu/ (use this)
  - https://docs.mongodb.com/manual/tutorial/install-mongodb-on-ubuntu/
  - https://mkyong.com/mongodb/mongodb-failed-to-unlink-socket-file-tmpmongodb-27017/
  - check error di log/mongodb
  - ls -l untuk check jenis user
  - cd /var/log/ => check log nya 
  - https://serverfault.com/questions/837315/mongodb-too-many-files-open-even-after-setting-limits = > for setup the limits

  + set limit memory in mongodb
  - mongo
  - show dbs
  - use admin
  - db.adminCommand({getParameter: 1, internalQueryExecMaxBlockingSortBytes:1})
  - db.adminCommand({setParameter: 1, internalQueryExecMaxBlockingSortBytes:2050151432})
  - db.adminCommand({setParameter: 1, internalQueryExecMaxBlockingSortBytes:250151432})
  
  => importent 
  => install from github project 
  - # open the project from vs code 
  - # git init  
  - # or 
  - # git remote add origin http:// ur_github 
  - # git add . 
  - # git commit -m "ur message" 
  - # git push origin master 
  
  - # mkdir repos 
  - # cd repos 
  - # git clone ur_git url
  - # masukan username dan passwordnya
  - # cd ur_folder file
  - # npm install => for intalling the package from node js

  - # for fix bug cannot install 
  - # npm config set user 0
  - # clear
  - # npm install


 
Note installation Putty : 
{% comment %} use mysql {% endcomment %}
- use mysql 
= =========================>
- $ ssh root@145.14.157.44
- $ password: ur_password
- # sudo apt update
- # sudo apt install mysql -server
- # Y

= lets goto configurations
- # mysqld --version
- # sudo mysqld_secure_installation
- # Yes for setup the password 

= Lets Cek the status
- # sudo systemctl status mysql
- # clear

- # mysql
- # show databases;
- # quit;

- set up nginx
- # sudo apt update
- # sudo apt install nginx
- # Y
- # sudo apt install ufw
- # ufw app list
- # sudo ufw allow ssh
- # sudo ufw allow http
- # ufw app list
- # sudo ufw allow 'Nginx HTTP'

- # sudo systemctl enable ufw
- # sudo systemctl status ufw

- # sudo ufw enable
- # Y
- # sudo systemctl status ufw
- # ufw status 
- # systemctl status nginx 

- for stope proses 
- # SUDO /etc/init.d/apache2 stop
- # systemctl start nginx
- # systemctl status nginx

- # sudo apt-get remove apache2*

 === end configuration

  - # mkdir -p /var/www/servername.com/html
  - # chown -R $USER:USER /var/www/servername.com/html

  - # chmod -R /var/www/servername.com
  - # nano  /var/www/servername.com/html/index.html => for edit in editor 

  - # nginx -t => for test 
  - # systemctl restart nginx
  - # systemctl status nginx

  - Install node js on linux
  - install using nvm (use this importent) 
  - sudo apt-get update
  - sudo apt-get install build-essential libssl-dev
    # Once the prerequisite packages are installed, you can pull down the nvm installation script from the projectâ€™s GitHub page. The version number may be different, but in general, you can download it with curl:
    # curl -sL https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh -o install_nvm.sh
  - nano install_nvm.sh
  - bash install_nvm.sh
  - source ~/.profile
  - nvm ls-remote
  - nvm install (find the latest lts version)
  
  

  - # clear
  - # ls
  - # systemctl status
  - # pm2 start --help
  - # npm run build => for run the package 
  - # ls dist
  - # pm2 start ./dist/main.js => for run the file node js 

  - # cd etc/nginx
  - # nano sites-available/servername.com

  - # systemctl restart nginx
  - # nginx -t 
  - # systemctl restart nginx
  - # systemctl status nginx
  - #  
==============

Lankah : A (Membuat FIle koneksi ke database) 
1.	cd arahkan directori ke file 
2.	code . ("membuka kode editor")
3.	buat file db.js / scrap.js
4. 	npm install --save mongodb ("untuk install mongo db ke cli file")
5.	var mongo = require('mongodb'); ("untuk require file db nya")

search-ms:displayname=Search%20Results%20in%20OS%20(C%3A)&crumb=location:C%3A%5C\elk

Lankah : B
1.	Buat Foldernya 
2.	arahkan directori file nya lewat CLI 
3.	buka code . (untuk visual code editor)
4.	buat file scrapper.js
5.	baca documentasinya https://github.com/puppeteer/puppeteer/ ("headless google puppeteer")
6.	npm install --save puppeteer ("untuk install puppeteer nya")
7. 	puppeteer query dom ("how to scrape an element") https://github.com/puppeteer/puppeteer/issues/489


Buat Sceduler
npm install --save node-corn

===== Back up mongo db on server 
# mongo
# show dbs
# use database_name
# show users
check on 1.10
# show collections
# mongodump --port 27017 -u "name_of_users" -p "password" --db=name_db --out=backup/mongodb
-u mean name of users
# cd backup/mongodb
===> sudo mongodump --db web-scrap --out backup_database_20200528
===> sudo mongodump --db web-scraping --out backup_database_20200610_ws
===> sudo mongodump --db web-scraping-flashback --out backup_database_20200610_wsf

===> sudo mongodump --db web-scrap --out /home/support/Apps/sceduler/db_backup/name_database
===> sudo mongodump -u "" -p "" --db=name_db --db web-scrap --authenticationDatabase root --out /home/support/Apps/sceduler/db_backup/name_database

===== for restore
# mongorestore --db=server_web-scrap  
# mongo -u sampleuser -p --authenticationDatabase sampledb
# show collections

===
db.list_data.find({})
   .projection({})
   .sort({timestamp:-1})
   .limit(100)
   
===
db.list_data.find({})
   .projection({})
   .sort({_id:-1})
   .limit(100)
   
{% comment %} On Windows  {% endcomment %}
===
https://beginnersbook.com/2017/09/how-to-install-and-configure-mongodb-for-windows/

=> Open New CMD *
-  Mongod  
=> Open New CMD (for shell CMD **)
-  Mongo  
=> Open New CMD as Administrator  *** 
-  cd C:\Program Files\MongoDB\Server\4.0\bin
** show dbs
*** mongodump --> for backup and dump the database
== u can copy and paste the data baseback up into folder dump before u restore the database 
*** mongorestore --> for restore the database database

{% comment %} delete node js {% endcomment %}
- sudo apt-get purge --auto-remove nodejs

== for delete the data base 
** use database_name
** db.dropDatabase<>

=====================================================
#  mongo --host localhost
#  exit
#  localhost connection is allowed !!
#  ip a | grep inet
#  copy inet global
#  mongo --host 192.168.0.148(after copy)
#  Remote connection is allowed !!
#  clear 
#  vi /etc/mongod.conf
#  127.0.0.1,172.17.0.1 => add this no spase beetwen this 
#  Systemctl restart mongod
#  Systemctl status mongod
#  service is running. no erros in configuration file
#  mongo --host 116.68.171.100
#  mongo --host 172.17.0.1/16
#  apt-get install mongodb-clients
#  mongo --host 192.168.0.148(after copy)
#  172.17.0.1/16 brd 172.17.255.255 
============================================

In recap:
Install the deps by running:
yum install pango.x86_64 libXcomposite.x86_64 libXcursor.x86_64 libXdamage.x86_64 libXext.x86_64 libXi.x86_64 libXtst.x86_64 cups-libs.x86_64 libXScrnSaver.x86_64 libXrandr.x86_64 GConf2.x86_64 alsa-lib.x86_64 atk.x86_64 gtk3.x86_64 ipa-gothic-fonts xorg-x11-fonts-100dpi xorg-x11-fonts-75dpi xorg-x11-utils xorg-x11-fonts-cyrillic xorg-x11-fonts-Type1 xorg-x11-fonts-misc -y
... and in the source file, when you launch the browser itself specify:
const browser = await puppeteer.launch({ args: ['--no-sandbox']})
